# ============================
# .cursorrules — LostArk API Service
# ============================

# === 워크스페이스/컨텍스트 ===
- 워크스페이스 내 변경 이력과 코드 주석(@cursor-change, TODO 등)은 Cursor 후속 작업의 컨텍스트로 반드시 활용
- 주석은 단순 설명이 아닌 후속 작업 지침으로 간주

# === 팀/도구 공통 규칙 ===
- 긴 구현/예제 코드는 사용자가 요청할 때만 제공
- 설명·구조·전략 위주로 답변, 맥락은 간결 유지
- 범법적 행위, 악용 목적, 규제 위반 가능성 작업 금지
- 항상 시니어 개발자 수준의 설계·설명·코드 작성
- 코드 생성 후 최소 2회 Self-review 후 최종본 제시

# === 프로젝트 기술 스택/범위 ===
- Node.js 최신 LTS (예: 22)
- TypeScript (strict 모드, 표준 명명규칙 준수)
- Yarn Workspaces (모노레포)
- Fastify (HTTP/REST)
- UDP (dgram, JSON 메시지 · MTU 이내 단일 datagram 원칙)
- 3 계층:
  1) Fetch & Normalize (Lost Ark API → 정규화·캐싱)
  2) REST API (정규화 데이터 제공, 필요 시 Fetch 호출)
  3) UDP Gateway (기존 메시지 규격 유지, 초저지연 전송)
- shared 패키지: DTO, Config, 유틸, 로깅 공통화

# === 코드 스타일/규칙 ===
- TS 컴파일러 옵션: strict, noUncheckedIndexedAccess, exactOptionalPropertyTypes
- 모듈 시스템: ESM ("type": "module"), 경로 별칭: @/*
- ESLint(+import 정렬, unused-imports, jsonc) + Prettier 단일 포맷터
- 네이밍 규칙: PascalCase(타입/클래스), camelCase(변수/함수), UPPER_SNAKE_CASE(상수)
- SRP(단일 책임 원칙) 준수, async/await 우선, 모든 Promise 에러 처리
- 파일 상단 주석에 변경 메타:
  - @cursor-change: <ISO-date>, <semver>, <1~2줄 요약>
- 생성 코드에는 “왜/무엇/경계조건” 설명 주석 포함

# === 데이터/캐시 원칙 ===
- 외부 API 대형 JSON → 정규화 후 캐싱
- 캐시 계층: In-memory(짧은 TTL) → Redis(중간 TTL) → (선택) 영속 DB
- 캐시 키: char:<name>:v<schemaVersion>, 메타: updatedAt, version
- stale-while-revalidate 허용, 강제 리프레시(쿼리/헤더) 제공
- Lost Ark armories 상세: 직업 각인 2개 고려(스키마/요약 반영)

# === 동시성/안정성 ===
- Fetch: 싱글플라이트, 서킷브레이커, 지수백오프 재시도
- REST: bounded concurrency, 응답 캐시 헤더(ETag/Cache-Control)
- UDP: 최소 처리 → lock-free 큐 → 워커풀, 과부하 시 드롭
- 장애 시 graceful degrade(캐시 fallback), 외부 API 장애 시 캐시 서빙

# === DB/스키마/마이그레이션 ===
- DB 스키마는 코드와 분리, up/down 마이그레이션 유지
- 파괴적 변경 금지: Deprecation → 백필 → 교체 → 삭제 단계
- 변경/인덱스 전략 간단 메모 남기기

# === 외부 API/오픈소스 규칙 ===
- Lost Ark API 사용 시 README·코드 주석에 참조 버전 명시
  - 예: @lostark-api: v2025-08-01
- 외부 OSS 사용 시 README “About/License”에 출처·라이선스·버전·링크 명시
- 새 의존성 도입은 기본 금지, 불가피 시 근거 3줄 요약 기록

# === 코드 생성 지침 (Cursor/AI) ===
- 생성 파일: TypeScript + ESM, 최소 1개 테스트 포함
- 로깅: pino(JSON 구조), requestId 포함, 민감정보 금지
- 환경변수: .env(.example 제공), 비밀값 하드코딩 금지
- 샘플 라우트/구현은 사용자가 요청할 때만 생성
- 불필요한 boilerplate/Mock 데이터 금지

# === 문서/Docs 규칙 ===
- 프로젝트 설명/셋업은 루트 README.md, 그 외 문서는 Docs/ 하위에 배치
- Docs/ 구조: 카테고리별 디렉토리 구성, Index.md에 색인 유지
- 목차·색인에 존재하지 않는 문서 기재 금지
- 문서 변경 시 Index.md도 같은 단위로 갱신

# === 산출물/문서 관리 ===
- README.md: 프로젝트 설명, 셋업, 실행, 주요 env, 엔드포인트 포함
- 의미 있는 변경 시 README 동기화
- 대형 JSON/로그/스냅샷은 cache/** 저장
- node_modules, dist, coverage, cache/** 제외

# === 문서/계약 ===
- Public DTO: 버전 명시(v1), Domain DTO: 내부 전용
- 변경 시 호환성 주석 필수
- REST/UDP/DTO 계약은 문서화, 공개 스키마는 버전 디렉토리 배치
  - /packages/shared-types/v1/...

# === 편집 프로토콜 ===
- [컨텍스트 최소화] dist/node_modules/cache/** 열람 금지
- [변경 요약] 제안 시 Change Summary / Touched Files / Risk 기재
- [스코프 고정] 1회 제안·커밋 = 1 목적 (리팩토링/기능 추가 분리)
- [호환성 게이트] 계약 변경 전 Breaking Change Proposal 필수

# === 작업/추론 규칙 ===
- 추론성 작업 금지(사실 기반 원칙)
- 필요 시 근거·출처를 문서·주석에 명시
- 불확실한 부분은 “미정” 또는 “TODO”로 표기, 임의 작성 금지

# === AI 셀프 리뷰 체크리스트 ===
- 타입 안정(암시적 any 금지), 느슨한 타입 회피
- 비동기 안전(await 순서/누락 catch 방지)
- 경계 검증(zod/typebox 등)
- 오류 전파(에러코드: BAD_INPUT/NOT_FOUND/...)
- 로깅 품질(레벨·requestId·민감정보 배제)
- 성능(N+1·중복호출 제거, Promise.all 병렬화)
- 캐시(TTL·강제리프레시·히트/미스 점검)
- 시간/로캘(UTC 저장, 표시만 로캘), 타임존 의존 금지
- i18n(한글 응답 문자열은 리소스/상수 분리)

# === 계약/테스트 안전망 ===
- DTO/REST/UDP 스키마 스냅샷 테스트 유지
- UDP: 샘플 페이로드 인코딩/디코딩·에코·최대 길이(한글 포함) 테스트
- 버그 수정 시 동일 입력 재현 테스트 추가

# === 퍼포먼스/레이트리밋/회복성 ===
- 목표: REST p95 ≤ 50ms, UDP p95 ≤ 10ms (캐시 히트 기준)
- 레이트리밋: REST와 Fetch 분리, X-RateLimit-* 일관 관리
- 외부 장애 시 폴백/서킷 동작 문서화

# === 릴리스/버전 전략 ===
- semver: 내부 변경=patch, 계약 추가=minor, 계약 변경=major
- CHANGELOG.md: Added/Changed/Fixed/Deprecated/Removed/Security 형식
- Lost Ark API 버전 변경 시 동기화

# === 모노레포 매너 ===
- shared-* 변경 시 영향 범위 요약, 순환 의존 금지
- TS Project References 그래프 유지, 깨질 시 변화 요약 첨부

# === 프롬프트/요청 처리 규칙 (Cursor) ===
- 사용자가 “예제/구현” 요청한 경우에만 코드 생성
- 스캐폴딩은 20~60줄 내, 필요한 파일만 생성
- 1회 응답에서 파일 최대 3개, 많으면 배치 분할
- 파괴적 변경·의존성 추가·계약 변경 전 승인 질문 선행
