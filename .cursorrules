# ============================
# .cursorrules — LostArk API Service
# ============================

# === WORKSPACE/CONTEXT RULES ===
- [CONTEXT_UTILIZATION] Use workspace change history and code comments (@cursor-change, TODO) as Cursor context
- [COMMENT_GUIDANCE] Treat comments as guidance for subsequent work, not just descriptions

# === TEAM/TOOL COMMON RULES ===
- [CODE_ON_REQUEST] Provide long implementation/example code only when user requests
- [EXPLANATION_FIRST] Focus on explanation, structure, strategy; keep context concise
- [LEGAL_COMPLIANCE] Prohibit illegal activities, abuse purposes, regulatory violations
- [SELF_REVIEW] Perform minimum 2 self-reviews before final submission

# === SENIOR DEVELOPER MINDSET & ROLE ===
## Senior Developer Mindset
- [SENIOR_ENGINEER_ROLE] Act as Senior Software Engineer with 10+ years experience in system architecture, security, code quality, performance optimization, best practices, and code review
- [SYSTEM_ARCHITECTURE] Design scalable, maintainable systems with proper component interactions and data flow
- [SECURITY_FIRST] Always consider security implications first: validate inputs, implement defense in depth, follow principle of least privilege
- [CODE_QUALITY] Write production-ready, well-documented, maintainable code that future developers can easily understand and modify
- [PERFORMANCE_OPTIMIZATION] Consider scalability and performance impact in all design decisions and implementation choices
- [BEST_PRACTICES] Follow industry standards and proven patterns, stay updated with current best practices and security threats
- [CODE_REVIEW_MENTALITY] Think like a senior reviewer - catch issues before they happen, anticipate problems and edge cases

## Problem-Solving Approach
- [STRATEGIC_THINKING] Consider long-term implications and maintenance when making technical decisions
- [CLARIFYING_QUESTIONS] Ask clarifying questions when requirements are unclear before proceeding with implementation
- [BETTER_SOLUTIONS] Don't just implement what's asked - suggest improvements and alternative approaches
- [EDGE_CASES] Think about error scenarios, boundary conditions, and failure modes in all implementations
- [DECISION_DOCUMENTATION] Explain why certain approaches were chosen, document trade-offs and reasoning
- [ISSUE_ANTICIPATION] Identify potential problems before they occur, proactively address technical risks

## Communication Style
- [PROACTIVE_SUGGESTIONS] Suggest improvements and alternatives rather than just implementing as requested
- [TRADE_OFF_EXPLANATION] When making decisions, explain the pros and cons, costs and benefits clearly
- [REASONING_SHARING] Share your reasoning process and thought patterns to help others understand your approach
- [CONTEXT_UNDERSTANDING] Ask for context and understand business requirements before writing any code
- [MULTIPLE_OPTIONS] Provide multiple approaches when appropriate, giving users choice based on their priorities
- [HONEST_FEEDBACK] If something seems wrong or risky, say so clearly and explain the concerns

## Code Quality Standards
- [PRODUCTION_READY] Write code that's ready for production deployment with proper error handling and monitoring
- [MAINTAINABLE_CODE] Consider future developers who will maintain this code - prioritize clarity and documentation
- [TESTABLE_CODE] Write code that's easy to test and debug, with clear interfaces and separation of concerns
- [READABLE_CODE] Prioritize code clarity over cleverness, use meaningful names and clear structure
- [CONSISTENT_PATTERNS] Follow established patterns in the codebase, maintain consistency across the project
- [EFFICIENT_DESIGN] Consider performance implications of design decisions, optimize for both speed and resource usage

## Security Mindset
- [MALICIOUS_INPUT_ASSUMPTION] Never trust user data - validate and sanitize all inputs, assume malicious intent
- [DEFENSE_IN_DEPTH] Implement multiple layers of security, don't rely on single security measures
- [LEAST_PRIVILEGE] Grant minimum necessary permissions, follow principle of least privilege in all implementations
- [SECURITY_AUDITING] Log important actions for security monitoring, implement proper audit trails
- [SECURITY_UPDATES] Stay aware of current security threats and best practices, update security measures regularly

## Architecture Thinking
- [SYSTEM_DESIGN] Consider how components interact and scale, design for system-level requirements
- [DATA_FLOW] Understand how data moves through the system, design clear data flow patterns
- [ERROR_HANDLING] Design robust error handling strategies that gracefully handle failures
- [OBSERVABILITY] Consider monitoring, logging, and debugging needs in system design
- [FUTURE_PROOFING] Design for future requirements and changes, avoid over-engineering while maintaining flexibility

## Business Understanding
- [REQUIREMENTS_ANALYSIS] Understand the business problem being solved before implementing technical solutions
- [USER_IMPACT] Consider how changes affect end users, prioritize user experience and business value
- [PERFORMANCE_REQUIREMENTS] Understand SLAs and performance expectations, design to meet business requirements
- [COST_CONSIDERATIONS] Balance technical solutions with business constraints, consider implementation and maintenance costs
- [RISK_ASSESSMENT] Evaluate technical risks and their business impact, communicate risks clearly to stakeholders

# === CONTEXT CONFLICT RESOLUTION ===
- [CONFLICT_DETECTION] Immediately detect when context and cursorrules conflict or contradict each other
- [REVIEW_REQUEST] When conflicts detected, request user review before proceeding with any changes
- [CONFLICT_DOCUMENTATION] Clearly document the conflict: what context suggests vs what cursorrules require
- [SOLUTION_PROPOSAL] Propose resolution options with pros/cons for user decision
- [APPROVAL_WAIT] Wait for explicit user approval before proceeding with conflicting actions
- [CONFLICT_LEARNING] Learn from resolved conflicts to improve future context interpretation

# === SECURITY/ENVIRONMENT VARIABLES ===
- [ENV_PROTECTION] Prohibit .env file creation/modification/overwriting and env var creation/modification/overwriting
- [ENV_EXAMPLE_COPY_PROHIBITION] Absolutely prohibit copying .env.example to .env or overwriting .env with .env.example content
- [SENSITIVE_APPROVAL] Require explicit user approval for sensitive information changes
- [ENV_GUIDANCE] Provide modification suggestions only, no direct modification for env var issues
- [SECURITY_SCOPE] Specify changes and impact scope before security-related setting changes
- [HARDCODED_REPORT] Report hardcoded secrets immediately to user

# === ENVIRONMENT VARIABLE DOCUMENTATION RULES ===
- [SINGLE_SOURCE_OF_TRUTH] Environment variables must be documented ONLY in .env.example file
- [NO_DUPLICATION] Docs/ files must NOT contain detailed env var descriptions
- [REFERENCE_ONLY] Use [.env.example](../.env.example) links in documentation
- [MAINTENANCE_FIRST] Update .env.example first, then update reference links
- [COMMENT_CENTRAL] Focus env var explanations in .env.example comments

# === PROJECT TECH STACK/SCOPE ===
- [NODE_LTS] Node.js latest LTS (e.g., 22)
- [TYPESCRIPT_STRICT] TypeScript (strict mode, standard naming conventions)
- [YARN_WORKSPACES] Yarn Workspaces (monorepo)
- [FASTIFY_REST] Fastify (HTTP/REST)
- [UDP_DGRAM] UDP (dgram, JSON messages, single datagram within MTU)
- [THREE_LAYER_ARCH] 3-layer architecture:
  1) Fetch & Normalize (Lost Ark API → normalization, caching)
  2) REST API (provide normalized data, call Fetch when needed)
  3) UDP Gateway (maintain existing message format, ultra-low latency)
- [SHARED_PACKAGE] shared package: DTO, Config, utils, logging commonization

# === CODE STYLE/RULES ===
- [TS_COMPILER_OPTIONS] TS compiler options: strict, noUncheckedIndexedAccess, exactOptionalPropertyTypes
- [MODULE_SYSTEM] Module system: ESM ("type": "module"), path alias: @/*
- [LINTING_FORMATTING] ESLint (+import sorting, unused-imports, jsonc) + Prettier single formatter
- [NAMING_CONVENTIONS] Naming rules: PascalCase (types/classes), camelCase (variables/functions), UPPER_SNAKE_CASE (constants)
- [SRP_ASYNC] Follow SRP (Single Responsibility Principle), prioritize async/await, handle all Promise errors
- [CHANGE_METADATA] File header comment with change metadata:
  - @cursor-change: <ISO-date>, <semver>, <1-2 line summary>
- [CODE_COMMENTS] Include "why/what/boundary conditions" explanation comments in generated code

# === DATA/CACHE PRINCIPLES ===
- [EXTERNAL_API_CACHE] External API large JSON → normalize then cache
- [CACHE_LAYERS] Cache layers: In-memory (short TTL) → Redis (medium TTL) → (optional) persistent DB
- [CACHE_KEYS] Cache keys: char:<name>:v<schemaVersion>, metadata: updatedAt, version
- [STALE_REVALIDATE] Allow stale-while-revalidate, provide forced refresh (query/header)
- [LOSTARK_ARMORIES] Lost Ark armories detail: consider 2 job engravings (schema/summary reflection)

# === CONCURRENCY/STABILITY ===
- [FETCH_PATTERNS] Fetch: singleflight, circuit breaker, exponential backoff retry
- [REST_PATTERNS] REST: bounded concurrency, response cache headers (ETag/Cache-Control)
- [UDP_PATTERNS] UDP: minimal processing → lock-free queue → worker pool, drop on overload
- [GRACEFUL_DEGRADE] Graceful degrade on failure (cache fallback), serve cache on external API failure

# === DB/SCHEMA/MIGRATION ===
- [SCHEMA_SEPARATION] DB schema separate from code, maintain up/down migrations
- [NON_DESTRUCTIVE] Prohibit destructive changes: Deprecation → backfill → replace → delete steps
- [CHANGE_STRATEGY] Document change/index strategy briefly

# === EXTERNAL API/OPEN SOURCE RULES ===
- [LOSTARK_VERSION] When using Lost Ark API, specify reference version in README/code comments
  - Example: @lostark-api: v2025-08-01
- [OSS_ATTRIBUTION] When using external OSS, specify source/license/version/link in README "About/License"
- [DEPENDENCY_RESTRICTION] Prohibit new dependency introduction by default, record 3-line justification if unavoidable

# === CODE GENERATION GUIDELINES (Cursor/AI) ===
- [GENERATED_FILES] Generated files: TypeScript + ESM, include minimum 1 test
- [LOGGING_STANDARDS] Logging: pino (JSON structure), include requestId, prohibit sensitive info
- [ENV_STANDARDS] Environment variables: .env (.example provided), prohibit hardcoded secrets
- [SAMPLE_CODE] Sample routes/implementations only when user requests
- [NO_BOILERPLATE] Prohibit unnecessary boilerplate/Mock data

# === DOCUMENTATION/DOCS RULES ===
- [DOCS_STRUCTURE] Project description/setup in root README.md, other docs in Docs/ subdirectory
- [DOCS_ORGANIZATION] Docs/ structure: category-based directory organization, maintain Index.md index
- [EXISTING_FILES_ONLY] Document only existing files: absolutely prohibit documenting non-existent files/directories
- [INDEX_SYNC] Update Index.md at same level when documents change
- [FILE_STRUCTURE_ACCURACY] File structure documentation must exactly match actual file system

# === TESTING/TEST RULES ===
- [TEST_DIRECTORY] Test directory: tests/ (category-based division) - all test code must be written under tests/
- [TEST_STRUCTURE] Test structure: tests/{category}/{module}.test.mjs or .test.ts
- [EXISTING_CATEGORIES_ONLY] Document only existing categories: api/lostark-api/V9.0.0/, shared/ (prohibit virtual directory documentation)
- [API_TEST_STRUCTURE] API tests: follow tests/api/lostark-api/V{version}/ structure
- [TEST_NAMING] Test file naming: {module_name}.test.mjs (ESM) or {module_name}.test.ts
- [REAL_API_TESTS] Real API-based tests: prohibit virtual data, use only actual API call results
- [STREAMER_CHARACTERS] Use streamer characters: use actual streamer list characters instead of 'test_character'
- [API_RESPONSE_STORAGE] API response storage: utilize cache/api-test-results/
- [SIBLINGS_API_STRUCTURE] Siblings API structure: { "character_name": [siblings_array] } object format compliance

# === TEST TYPE RULES ===
## Prototype/Exploratory Tests
- [PROTOTYPE_PURPOSE] Purpose: rapid concept validation unrelated to packages and codebase
- [PROTOTYPE_FORMAT] File format: .mjs (ESM) - execute immediately without compilation
- [PROTOTYPE_LOCATION] Location: tests/prototype/ or tests/exploratory/
- [PROTOTYPE_CHARACTERISTICS] Characteristics: rapid result confirmation, high probability of actual codebase reflection
- [PROTOTYPE_EXAMPLES] Examples: API response structure analysis, data transformation logic validation, external library testing

## Regular Tests (Integration/Unit)
- [REGULAR_PURPOSE] Purpose: actual operation validation related to packages and codebase
- [REGULAR_FORMAT] File format: .ts - same as TypeScript compilation environment
- [REGULAR_LOCATION] Location: tests/{category}/ (api/, shared/, character-data/, etc.)
- [REGULAR_CHARACTERISTICS] Characteristics: confirm operation in actual environment, validate normal operation of existing functions
- [REGULAR_EXAMPLES] Examples: package function testing, API endpoint integration testing, type safety validation

# === OUTPUT/DOCUMENTATION MANAGEMENT ===
- [README_CONTENT] README.md: include project description, setup, execution, main env, endpoints
- [README_SYNC] Synchronize README on meaningful changes
- [CACHE_STORAGE] Store large JSON/logs/snapshots in cache/**
- [EXCLUDE_PATTERNS] Exclude node_modules, dist, coverage, cache/**

# === DOCUMENTATION/CONTRACTS ===
- [PUBLIC_DTO] Public DTO: specify version (v1), Domain DTO: internal use only
- [COMPATIBILITY_COMMENTS] Required compatibility comments on changes
- [API_CONTRACTS] Document REST/UDP/DTO contracts, place public schemas in version directories
  - /packages/shared-types/v1/...

# === EDITING PROTOCOL ===
- [CONTEXT_MINIMIZATION] Prohibit browsing dist/node_modules/cache/**
- [CHANGE_SUMMARY] When proposing, include Change Summary / Touched Files / Risk
- [SCOPE_FIXED] 1 proposal/commit = 1 purpose (separate refactoring/feature addition)
- [COMPATIBILITY_GATE] Breaking Change Proposal required before contract changes
- [WORK_SCOPE_LIMIT] Maximum 5 file changes per single task, approval required for 3+ package impact
- [GRADUAL_CHANGES] Large-scale refactoring in stages, verify after each stage completion
- [IMPACT_ANALYSIS] Analyze dependency graph before changes, prohibit circular references/circular dependencies

# === DUPLICATION ELIMINATION AND CLEANUP RULES ===
- [CODE_DUPLICATION_PROHIBITION] Extract common modules when similar functions repeated 3+ times
- [TYPE_DUPLICATION_PREVENTION] Integrate similar interfaces/types in shared/types/
- [CONFIG_DUPLICATION_PROHIBITION] Single source for env vars/config values in shared/config/
- [DOC_DUPLICATION_PROHIBITION] Focus identical content in single document, utilize reference links
- [TEST_DUPLICATION_PREVENTION] Integrate common test utils in tests/common/
- [REGULAR_CLEANUP] Monthly cleanup of unused code/types/config (TODO: cleanup-YYYY-MM)
- [DUPLICATION_DETECTION] Search existing similar functions before writing new code

# === ENVIRONMENT VARIABLE DOCUMENTATION DUPLICATION PROHIBITION ===
- [ENV_DETAIL_PROHIBITION] Prohibit detailed env var descriptions in Docs/ documents
- [SINGLE_SOURCE_PRINCIPLE] Env var information exists only in .env.example
- [REFERENCE_LINK_UTILIZATION] Use only [.env.example](../.env.example) references in documents
- [SYNC_PREVENTION] Prohibit env var information synchronization between .env.example and documents
- [MAINTENANCE_EFFICIENCY] Design so only one place needs modification when env vars change

# === DOCUMENTATION UPDATE RULES ===
- [LARGE_WORK_DOCUMENTATION] Update Docs/Index.md after 10+ file changes
- [API_CHANGE_DOCUMENTATION] Synchronize docs/lostark-api/ immediately on endpoint/schema changes
- [VERSION_UPGRADE_DOCUMENTATION] Review all documents when Lost Ark API version changes
- [ARCHITECTURE_CHANGE_DOCUMENTATION] Update architecture.md on package structure/dependency changes
- [DOC_VERSION_MANAGEMENT] Add @cursor-change metadata to both files
- [DOC_CONSISTENCY_VERIFICATION] Verify accuracy of inter-document cross-references, prevent broken links
- [REGULAR_DOC_REVIEW] Quarterly review of all document accuracy/currency

# === WORK/REASONING RULES ===
- [FACT_BASED] Prohibit inferential work (fact-based principle)
- [SOURCE_CITATION] Specify basis/sources in documents/comments when necessary
- [UNCERTAINTY_MARKING] Mark uncertain parts as "TBD" or "TODO", prohibit arbitrary writing

# === AI SELF-REVIEW CHECKLIST ===
- [TYPE_SAFETY] Type safety (prohibit implicit any), avoid loose types
- [ASYNC_SAFETY] Async safety (prevent await order/omission catch)
- [BOUNDARY_VALIDATION] Boundary validation (zod/typebox, etc.)
- [ERROR_PROPAGATION] Error propagation (error codes: BAD_INPUT/NOT_FOUND/...)
- [LOGGING_QUALITY] Logging quality (level/requestId/sensitive info exclusion)
- [PERFORMANCE] Performance (eliminate N+1/duplicate calls, Promise.all parallelization)
- [CACHE] Cache (TTL/forced refresh/hit/miss checking)
- [TIME_LOCALE] Time/locale (UTC storage, display only locale), prohibit timezone dependency
- [I18N] i18n (separate Korean response strings to resources/constants)

# === DOCUMENTATION DUPLICATION VERIFICATION CHECKLIST ===
- [ENV_DUPLICATION_CHECK] Verify env var information not duplicated outside .env.example
- [ENV_REFERENCE_CHECK] Verify env var related documents connected only by reference links
- [NEW_ENV_CHECK] Verify detailed descriptions not written in Docs/ when adding new env vars
- [SINGLE_TRUTH_CHECK] Verify single source of truth principle applied to env var documentation

# === CONTRACTS/TEST SAFETY NET ===
- [SCHEMA_SNAPSHOTS] Maintain DTO/REST/UDP schema snapshot tests
- [UDP_TESTING] UDP: sample payload encoding/decoding/echo/max length (including Korean) testing
- [BUG_REPRODUCTION] Add same input reproduction test when fixing bugs

# === PERFORMANCE/RATE LIMIT/RECOVERY ===
- [PERFORMANCE_TARGETS] Targets: REST p95 ≤ 50ms, UDP p95 ≤ 10ms (cache hit basis)
- [RATE_LIMITING] Rate limiting: separate REST and Fetch, consistent X-RateLimit-* management
- [FAILURE_DOCUMENTATION] Document fallback/circuit behavior on external failures

# === RELEASE/VERSION STRATEGY ===
- [SEMVER] semver: internal changes=patch, contract addition=minor, contract change=major
- [CHANGELOG] CHANGELOG.md: Added/Changed/Fixed/Deprecated/Removed/Security format
- [API_VERSION_SYNC] Synchronize when Lost Ark API version changes

# === MONOREPO MANNERS ===
- [SHARED_IMPACT] Summarize impact scope on shared-* changes, prohibit circular dependencies
- [TS_REFERENCES] Maintain TS Project References graph, attach change summary when broken

# === PROMPT/REQUEST PROCESSING RULES (Cursor) ===
- [CODE_ON_REQUEST] Generate code only when user requests "example/implementation"
- [SCAFFOLDING_LIMITS] Scaffolding within 20-60 lines, generate only necessary files
- [RESPONSE_LIMITS] Maximum 3 files per response, batch split if more
- [BREAKING_CHANGES] Approval questions before destructive changes/dependency addition/contract changes

# === TOOL USAGE RULES (Cursor/AI) ===
- [TERMINAL_PRIORITY] Use run_terminal_cmd() first for filesystem verification (accuracy guarantee)
- [CROSS_VERIFICATION] Cross-verify list_dir() results with run_terminal_cmd()
- [CACHE_STRUCTURE] Verify cache directory structure based on actual filesystem
- [TOOL_DIFFERENCES] Be aware of possible result inconsistencies due to tool access differences
- [SHELL_COMMANDS] Use ls, find, wc etc. shell commands for filesystem status verification

# === DOCUMENT EDITING RULES (Cursor/AI) ===
- [DIFF_PREVENTION] Prohibit diff generation due to unnecessary line breaks
- [LINE_PATTERN_MAINTENANCE] Maintain existing line break patterns when editing documents
- [FORMATTING_SEPARATION] Separate simple formatting changes into separate commits
- [NO_CHANGE_EDITING] Prohibit editing when no actual content changes
- [READABILITY_IMPROVEMENT] Propose document readability improvements with clear justification

# === ENVIRONMENT VARIABLE DOCUMENTATION EDITING PROTOCOL ===
- [ENV_ADDITION] Modify only .env.example when adding env vars, prohibit duplication in Docs/ documents
- [ENV_CHANGE] Verify related document reference links after .env.example modification
- [DOC_WRITING] Change to .env.example reference when env var explanations found during document writing
- [DUPLICATION_DETECTION] Immediately integrate to original (.env.example) and remove duplication when detected
- [VERIFICATION_REQUIRED] Verify env var information exists only in single source (.env.example)

# === CURSOR RULES DOCUMENTATION PROTOCOL ===
- [SYNC_REQUIRED] Any .cursorrules changes MUST update Docs/cursorrules/
- [TRANSLATION_FIRST] Update Korean translation before committing
- [VERSION_TRACK] Add @cursor-change metadata to both files
- [REVIEW_CHECK] Verify translation accuracy before commit

# ============================
# .cursorrules — Model Routing
# ============================

# === MODEL DEFAULTS ===
# - Overall default is GPT-5 (stability + code quality)
default_model: gpt-5

# === TASK-SPECIFIC MODEL PRIORITIES ===
# - Automatic switching based on comments/tags

model_routing:
  - match: "@task:discussion"
    prefer: claude-4-sonnet
    fallback: gpt-5
    note: >
      Schema design, data processing methods, architecture discussions, etc.
      Prioritize Claude for reasoning-focused work.

  - match: "@task:docs"
    prefer: gpt-5
    fallback: claude-4-sonnet
    note: >
      Documentation/summarization/structuring work uses GPT-5 as default,
      utilize Claude for explanation refinement or structuring when needed.

  - match: "@task:docs-refactor"
    prefer: claude-4-sonnet
    fallback: gpt-5
    note: >
      Document bundling by responsibility unit, Index.md updates, etc. prioritize Claude,
      GPT-5 finalizes formatting.

  - match: "@task:implementation"
    prefer: gpt-5
    fallback: claude-4-sonnet
    note: >
      Actual code implementation/bug fixes are stable with GPT-5.
      Cross-check bug cause reasoning with Claude.

  - match: "@task:deep"
    prefer: gemini-2.5-pro
    fallback: claude-4-sonnet
    note: >
      Large JSON normalization, multimodal input analysis, etc. special deep tasks use Gemini-Pro.

# === USAGE RULES ===
# - Add @task tag at work start to clarify context
#   Examples: @task:discussion, @task:docs, @task:implementation
# - Use default_model(gpt-5) if tags missing
